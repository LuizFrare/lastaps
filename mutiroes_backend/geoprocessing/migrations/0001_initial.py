# Generated by Django 4.2.7 on 2025-10-04 23:39

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('events', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nome')),
                ('description', models.TextField(blank=True, verbose_name='Descrição')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('area_type', models.CharField(choices=[('neighborhood', 'Bairro'), ('district', 'Distrito'), ('city', 'Cidade'), ('region', 'Região'), ('custom', 'Personalizada')], max_length=50, verbose_name='Tipo de Área')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('radius_km', models.FloatField(default=5.0, verbose_name='Raio em KM')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Área',
                'verbose_name_plural': 'Áreas',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('accuracy', models.FloatField(blank=True, null=True, verbose_name='Precisão (metros)')),
                ('is_current', models.BooleanField(default=True, verbose_name='Localização Atual')),
                ('source', models.CharField(choices=[('gps', 'GPS'), ('network', 'Rede'), ('manual', 'Manual')], default='gps', max_length=20, verbose_name='Fonte')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Localização do Usuário',
                'verbose_name_plural': 'Localizações dos Usuários',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nome')),
                ('description', models.TextField(blank=True, verbose_name='Descrição')),
                ('total_distance', models.FloatField(verbose_name='Distância Total (KM)')),
                ('estimated_duration', models.DurationField(verbose_name='Duração Estimada')),
                ('is_optimized', models.BooleanField(default=False, verbose_name='Otimizada')),
                ('optimization_algorithm', models.CharField(blank=True, max_length=50, verbose_name='Algoritmo de Otimização')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('events', models.ManyToManyField(related_name='routes', to='events.event', verbose_name='Eventos')),
            ],
            options={
                'verbose_name': 'Rota',
                'verbose_name_plural': 'Rotas',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ImpactMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('waste_collected_kg', models.FloatField(blank=True, null=True, verbose_name='Lixo Coletado (KG)')),
                ('trees_planted', models.PositiveIntegerField(blank=True, null=True, verbose_name='Árvores Plantadas')),
                ('area_cleaned_m2', models.FloatField(blank=True, null=True, verbose_name='Área Limpa (m²)')),
                ('co2_reduced_kg', models.FloatField(blank=True, null=True, verbose_name='CO2 Reduzido (KG)')),
                ('participants_count', models.PositiveIntegerField(verbose_name='Número de Participantes')),
                ('hours_volunteered', models.FloatField(verbose_name='Horas Voluntariadas')),
                ('measured_at', models.DateTimeField(verbose_name='Medido em')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='impact_measurements', to='events.event', verbose_name='Evento')),
                ('measured_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Medido por')),
            ],
            options={
                'verbose_name': 'Medição de Impacto',
                'verbose_name_plural': 'Medições de Impacto',
                'ordering': ['-measured_at'],
            },
        ),
        migrations.CreateModel(
            name='Geofence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nome')),
                ('description', models.TextField(blank=True, verbose_name='Descrição')),
                ('latitude', models.FloatField(verbose_name='Latitude Central')),
                ('longitude', models.FloatField(verbose_name='Longitude Central')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('notification_radius', models.FloatField(default=1.0, verbose_name='Raio de Notificação (KM)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('related_events', models.ManyToManyField(blank=True, related_name='geofences', to='events.event', verbose_name='Eventos Relacionados')),
            ],
            options={
                'verbose_name': 'Geofence',
                'verbose_name_plural': 'Geofences',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EventLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('address', models.CharField(max_length=300, verbose_name='Endereço')),
                ('city', models.CharField(max_length=100, verbose_name='Cidade')),
                ('state', models.CharField(max_length=2, verbose_name='Estado')),
                ('country', models.CharField(default='Brasil', max_length=100, verbose_name='País')),
                ('postal_code', models.CharField(blank=True, max_length=10, verbose_name='CEP')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='geoprocessing.area', verbose_name='Área')),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='location_data', to='events.event', verbose_name='Evento')),
            ],
            options={
                'verbose_name': 'Localização do Evento',
                'verbose_name_plural': 'Localizações dos Eventos',
            },
        ),
        migrations.CreateModel(
            name='EnvironmentalData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('air_quality_index', models.FloatField(blank=True, null=True, verbose_name='Índice de Qualidade do Ar')),
                ('temperature', models.FloatField(blank=True, null=True, verbose_name='Temperatura (°C)')),
                ('humidity', models.FloatField(blank=True, null=True, verbose_name='Umidade (%)')),
                ('pollution_level', models.CharField(blank=True, choices=[('low', 'Baixo'), ('moderate', 'Moderado'), ('high', 'Alto'), ('very_high', 'Muito Alto')], max_length=20, verbose_name='Nível de Poluição')),
                ('vegetation_coverage', models.FloatField(blank=True, null=True, verbose_name='Cobertura Vegetal (%)')),
                ('tree_density', models.FloatField(blank=True, null=True, verbose_name='Densidade de Árvores')),
                ('data_source', models.CharField(max_length=100, verbose_name='Fonte dos Dados')),
                ('collected_at', models.DateTimeField(verbose_name='Coletado em')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='environmental_data', to='geoprocessing.area', verbose_name='Área')),
            ],
            options={
                'verbose_name': 'Dado Ambiental',
                'verbose_name_plural': 'Dados Ambientais',
                'ordering': ['-collected_at'],
            },
        ),
    ]
