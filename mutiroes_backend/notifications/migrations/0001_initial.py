# Generated by Django 4.2.7 on 2025-10-04 23:39

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('events', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Título')),
                ('body', models.TextField(verbose_name='Corpo')),
                ('channel', models.CharField(choices=[('email', 'Email'), ('push', 'Push'), ('sms', 'SMS'), ('in_app', 'No App')], max_length=10, verbose_name='Canal')),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('sent', 'Enviada'), ('delivered', 'Entregue'), ('failed', 'Falhou'), ('cancelled', 'Cancelada')], default='pending', max_length=20, verbose_name='Status')),
                ('scheduled_for', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Agendado para')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Enviado em')),
                ('delivered_at', models.DateTimeField(blank=True, null=True, verbose_name='Entregue em')),
                ('related_object_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='ID do Objeto Relacionado')),
                ('related_object_type', models.CharField(blank=True, max_length=50, verbose_name='Tipo do Objeto Relacionado')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('related_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='events.event', verbose_name='Evento Relacionado')),
            ],
            options={
                'verbose_name': 'Notificação',
                'verbose_name_plural': 'Notificações',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nome')),
                ('notification_type', models.CharField(choices=[('event_created', 'Evento Criado'), ('event_updated', 'Evento Atualizado'), ('event_cancelled', 'Evento Cancelado'), ('event_reminder', 'Lembrete de Evento'), ('registration_confirmed', 'Inscrição Confirmada'), ('registration_cancelled', 'Inscrição Cancelada'), ('badge_earned', 'Badge Conquistado'), ('event_photo_uploaded', 'Foto do Evento Enviada'), ('event_comment', 'Comentário no Evento'), ('custom', 'Personalizada')], max_length=30, verbose_name='Tipo de Notificação')),
                ('title_template', models.CharField(max_length=200, verbose_name='Template do Título')),
                ('body_template', models.TextField(verbose_name='Template do Corpo')),
                ('send_email', models.BooleanField(default=True, verbose_name='Enviar Email')),
                ('send_push', models.BooleanField(default=True, verbose_name='Enviar Push')),
                ('send_sms', models.BooleanField(default=False, verbose_name='Enviar SMS')),
                ('send_immediately', models.BooleanField(default=True, verbose_name='Enviar Imediatamente')),
                ('delay_hours', models.PositiveIntegerField(default=0, verbose_name='Atraso em Horas')),
                ('send_at_specific_time', models.TimeField(blank=True, null=True, verbose_name='Enviar em Horário Específico')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
            ],
            options={
                'verbose_name': 'Template de Notificação',
                'verbose_name_plural': 'Templates de Notificação',
                'ordering': ['notification_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='NotificationQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.CharField(choices=[('low', 'Baixa'), ('normal', 'Normal'), ('high', 'Alta'), ('urgent', 'Urgente')], default='normal', max_length=10, verbose_name='Prioridade')),
                ('retry_count', models.PositiveIntegerField(default=0, verbose_name='Contador de Tentativas')),
                ('max_retries', models.PositiveIntegerField(default=3, verbose_name='Máximo de Tentativas')),
                ('scheduled_for', models.DateTimeField(verbose_name='Agendado para')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notifications.notification', verbose_name='Notificação')),
            ],
            options={
                'verbose_name': 'Fila de Notificação',
                'verbose_name_plural': 'Fila de Notificações',
                'ordering': ['priority', 'scheduled_for'],
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt_number', models.PositiveIntegerField(verbose_name='Número da Tentativa')),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('sent', 'Enviada'), ('delivered', 'Entregue'), ('failed', 'Falhou'), ('cancelled', 'Cancelada')], max_length=20, verbose_name='Status')),
                ('error_message', models.TextField(blank=True, verbose_name='Mensagem de Erro')),
                ('response_data', models.JSONField(default=dict, verbose_name='Dados da Resposta')),
                ('attempted_at', models.DateTimeField(auto_now_add=True, verbose_name='Tentado em')),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='notifications.notification', verbose_name='Notificação')),
            ],
            options={
                'verbose_name': 'Log de Notificação',
                'verbose_name_plural': 'Logs de Notificação',
                'ordering': ['-attempted_at'],
            },
        ),
        migrations.AddField(
            model_name='notification',
            name='template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='notifications.notificationtemplate', verbose_name='Template'),
        ),
        migrations.AddField(
            model_name='notification',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='Usuário'),
        ),
        migrations.CreateModel(
            name='PushToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=500, verbose_name='Token')),
                ('platform', models.CharField(choices=[('ios', 'iOS'), ('android', 'Android'), ('web', 'Web')], max_length=10, verbose_name='Plataforma')),
                ('device_id', models.CharField(blank=True, max_length=100, verbose_name='ID do Dispositivo')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('last_used', models.DateTimeField(auto_now=True, verbose_name='Último Uso')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='push_tokens', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Token de Push',
                'verbose_name_plural': 'Tokens de Push',
                'ordering': ['-last_used'],
                'unique_together': {('user', 'token')},
            },
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('event_created', 'Evento Criado'), ('event_updated', 'Evento Atualizado'), ('event_cancelled', 'Evento Cancelado'), ('event_reminder', 'Lembrete de Evento'), ('registration_confirmed', 'Inscrição Confirmada'), ('registration_cancelled', 'Inscrição Cancelada'), ('badge_earned', 'Badge Conquistado'), ('event_photo_uploaded', 'Foto do Evento Enviada'), ('event_comment', 'Comentário no Evento'), ('custom', 'Personalizada')], max_length=30, verbose_name='Tipo de Notificação')),
                ('email_enabled', models.BooleanField(default=True, verbose_name='Email Habilitado')),
                ('push_enabled', models.BooleanField(default=True, verbose_name='Push Habilitado')),
                ('sms_enabled', models.BooleanField(default=False, verbose_name='SMS Habilitado')),
                ('quiet_hours_start', models.TimeField(blank=True, null=True, verbose_name='Início do Horário Silencioso')),
                ('quiet_hours_end', models.TimeField(blank=True, null=True, verbose_name='Fim do Horário Silencioso')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Preferência de Notificação',
                'verbose_name_plural': 'Preferências de Notificação',
                'ordering': ['user', 'notification_type'],
                'unique_together': {('user', 'notification_type')},
            },
        ),
    ]
